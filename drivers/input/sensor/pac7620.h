

#define IRMOTION_TRACE_LOG

// REGISTER DESCRIPTION
#define PAC7620_VAL(val, maskbit)		( val << maskbit )
#define PAC7620_ADDR_BASE				0x00

// REGISTER BANK SELECT
#define PAC7620_REGITER_BANK_SEL		(PAC7620_ADDR_BASE + 0xEF)	//W

// REGISTER BANK 0
#define PAC7620_ADDR_SUSPEND_CMD		(PAC7620_ADDR_BASE + 0x3)	//W
#define PAC7620_ADDR_GES_PS_DET_MASK_0	(PAC7620_ADDR_BASE + 0x41)	//RW
#define PAC7620_ADDR_GES_PS_DET_MASK_1	(PAC7620_ADDR_BASE + 0x42)	//RW
#define PAC7620_ADDR_GES_PS_DET_FLAG_0	(PAC7620_ADDR_BASE + 0x43)	//R
#define PAC7620_ADDR_GES_PS_DET_FLAG_1	(PAC7620_ADDR_BASE + 0x44)	//R
#define PAC7620_ADDR_STATE_INDICATOR	(PAC7620_ADDR_BASE + 0x45)	//R
#define PAC7620_ADDR_PS_HIGH_THRESHOLD	(PAC7620_ADDR_BASE + 0x69)	//RW
#define PAC7620_ADDR_PS_LOW_THRESHOLD	(PAC7620_ADDR_BASE + 0x6A)	//RW
#define PAC7620_ADDR_PS_APPROACH_STATE	(PAC7620_ADDR_BASE + 0x6B)	//R
#define PAC7620_ADDR_PS_RAW_DATA		(PAC7620_ADDR_BASE + 0x6C)	//R
#define PAC7620_ADDR_OBJECT_AVG			(PAC7620_ADDR_BASE + 0xB0)	//R
#define PAC7620_ADDR_OBJECT_SIZE_0		(PAC7620_ADDR_BASE + 0xB1)	//R
#define PAC7620_ADDR_OBJECT_SIZE_1		(PAC7620_ADDR_BASE + 0xB2)	//R
#define PAC7620_ADDR_REG_BANK_RESET		(PAC7620_ADDR_BASE + 0xEE)	//R

// REGISTER BANK 1
#define PAC7620_ADDR_PS_GAIN			(PAC7620_ADDR_BASE + 0x44)	//RW
#define PAC7620_ADDR_IDLE_S1_STEP_0		(PAC7620_ADDR_BASE + 0x67)	//RW
#define PAC7620_ADDR_IDLE_S1_STEP_1		(PAC7620_ADDR_BASE + 0x68)	//RW
#define PAC7620_ADDR_IDLE_S2_STEP_0		(PAC7620_ADDR_BASE + 0x69)	//RW
#define PAC7620_ADDR_IDLE_S2_STEP_1		(PAC7620_ADDR_BASE + 0x6A)	//RW
#define PAC7620_ADDR_OP_TO_S1_STEP_0	(PAC7620_ADDR_BASE + 0x6B)	//RW
#define PAC7620_ADDR_OP_TO_S1_STEP_1	(PAC7620_ADDR_BASE + 0x6C)	//RW
#define PAC7620_ADDR_OP_TO_S2_STEP_0	(PAC7620_ADDR_BASE + 0x6D)	//RW
#define PAC7620_ADDR_OP_TO_S2_STEP_1	(PAC7620_ADDR_BASE + 0x6E)	//RW
#define PAC7620_ADDR_OPERATION_ENABLE	(PAC7620_ADDR_BASE + 0x72)	//RW

#define REG_VAL(v,s)									\
	do{ 												\
		v = (pac7620_i2c_read(PAC7620_ADDR_##s##_0) | 		\
		pac7620_i2c_read(PAC7620_ADDR_##s##_1) << 8); 	\
	}while(0)




#define INIT_INPUT_DATA(d,a,s)\
do{\
	int ret = 0;\
	printk("%s (%d) : initialize data\n", __func__, __LINE__);\
	d = input_allocate_device();\
	if (!d) {\
		printk("%s (%d) : could not allocate %s input device\n", __func__, __LINE__, s);\
		return -ENOMEM;\
	}\
	input_set_drvdata(d, &pac7620data);\
	d->name = s;\
	input_set_capability(d, EV_ABS, ABS_MISC);\
	input_set_abs_params(d, ABS_X, 0, 1024, 0, 0);\
	input_set_abs_params(d, ABS_Y, 0, 1024, 0, 0);\
	input_set_abs_params(d, ABS_Z, 0, 1024, 0, 0);\
	ret = input_register_device(d);\
	if (ret < 0) {\
		input_free_device(d);\
		printk("%s (%d) : could not register input device\n", __func__, __LINE__);	\
		return ret;\
	}\
	ret = sysfs_create_group(&d->dev.kobj, &a);	\
	if (ret) {\
		printk("%s (%d) : could not create sysfs group\n", __func__, __LINE__);\
		return 0;\
	}\
}while(0)





#define GET_BRIGHTNESS(b)									\
	do{ 												\
		b = pac7620_i2c_read(PAC7620_ADDR_OBJECT_AVG); \
	}while(0)


#define GET_OBJECT_SIZE(v,s)	REG_VAL(v,s)
#define GET_GESTURE(v,s)		REG_VAL(v,s)

// PAC7620_REGITER_BANK_SEL
#define PAC7620_BANK0		PAC7620_VAL(0,0)
#define PAC7620_BANK1		PAC7620_VAL(1,0)

// PAC7620_ADDR_SUSPEND_CMD
#define PAC7620_I2C_WAKEUP	PAC7620_VAL(1,0)
#define PAC7620_I2C_SUSPEND	PAC7620_VAL(0,0)

// PAC7620_ADDR_OPERATION_ENABLE
#define PAC7620_ENABLE		PAC7620_VAL(1,0)
#define PAC7620_DISABLE		PAC7620_VAL(0,0)

typedef enum {
	SUSPEND_STATE = 0,
	RESUME_STATE,
	STANDBY1_STATE,
	STANDBY2_STATE,	
//	PROXIMITY_STATE,
//	GESTURE_STATE,
	STANDBY_STATE,
	WORKING_STATE,
} state_e;

typedef enum {
	PROXIMITY_MODE = 0,
	IRMOTION_MODE,
	INITIAL_MODE,
	RESET_MODE,		
} mode_e;

typedef enum {
	BANK0 = 0,
	BANK1,
} bank_e;

enum {	
	GES_RIGHT_FLAG			 = BIT(0),
	GES_LEFT_FLAG			 = BIT(1),
	GES_UP_FLAG				 = BIT(2),
	GES_DOWN_FLAG			 = BIT(3),
	GES_FORWARD_FLAG		 = BIT(4),
	GES_BACKWARD_FLAG		 = BIT(5),
	GES_CLOCKWISE_FLAG		 = BIT(6),
	GES_COUNT_CLOCKWISE_FLAG = BIT(7),
	GES_WAVE_FLAG			 = BIT(8),

	PROXIMITY_FLAG			 = BIT(1),	
};

#define INIT_REG_ARRAY_MAX_SIZE 52
#define GES_REG_ARRAY_MAX_SIZE 219
#define PROX_REG_ARRAY_MAX_SIZE 28

// initial register set
unsigned char init_register_array[][2] = {
	{0xEF,0x00},{0xEF,0x00},{0x37,0x07},{0x38,0x17},{0x39,0x06},{0x42,0x01},{0x46,0x2D},{0x47,0x0F},
	{0x48,0xA0},{0x49,0x00},{0x4A,0x50},{0x4C,0x20},{0x51,0x10},{0x5E,0x10},{0x60,0x22},{0x61,0x28},
	{0x80,0x42},{0x81,0x44},{0x8B,0x01},{0x90,0x06},{0x95,0x0A},{0x96,0x0C},{0x97,0x05},{0x9A,0x14},
	{0x9C,0x3F},{0xA5,0x19},{0xCC,0x19},{0xCD,0x0B},{0xCE,0x13},{0xCF,0x64},{0xD0,0x21},{0xEF,0x01},
	{0x01,0x3C},{0x04,0x9A},{0x25,0x01},{0x27,0x39},{0x28,0x7F},{0x29,0x09},{0x32,0x18},{0x33,0x18},
	{0x3E,0xFF},{0x5E,0x1D},{0x65,0x96},{0x67,0x97},{0x69,0xCD},{0x6A,0x01},{0x6D,0x2C},{0x6E,0x01},
	{0x72,0x01},{0x73,0x35},{0x77,0x01},{0x7E,0x01},
};


// gesture register set
//Near_normal_mode_V5_6.15mm_121017 for 940nm
unsigned char ges_register_array[][2] = {
	{0xEF,0x00},{0x32,0x29},{0x33,0x01},{0x34,0x00},{0x35,0x01},{0x36,0x00},{0x37,0x07},{0x38,0x17},
	{0x39,0x06},{0x3A,0x12},{0x3F,0x00},{0x40,0x02},{0x41,0xDf},{0x42,0x01},{0x46,0x2D},{0x47,0x0F},
	{0x48,0xA0},{0x49,0x00},{0x4A,0x50},{0x4B,0x00},{0x4C,0x20},{0x4D,0x00},{0x4E,0x1A},{0x4F,0x14},
	{0x50,0x00},{0x51,0x10},{0x52,0x00},{0x5C,0x02},{0x5D,0x00},{0x5E,0x10},{0x5F,0x3F},{0x60,0x22},
	{0x61,0x28},{0x62,0x00},{0x63,0x03},{0x64,0xF7},{0x65,0x03},{0x66,0xD9},{0x67,0x03},{0x68,0x01},
	{0x69,0xC8},{0x6A,0x40},{0x6D,0x04},{0x6E,0x00},{0x6F,0x00},{0x70,0x80},{0x71,0x00},{0x72,0x00},
	{0x73,0x00},{0x74,0xF0},{0x75,0x00},{0x80,0x42},{0x81,0x44},{0x82,0x04},{0x83,0x20},{0x84,0x20},
	{0x85,0x00},{0x86,0x10},{0x87,0x00},{0x88,0x05},{0x89,0x18},{0x8A,0x10},{0x8B,0x01},{0x8C,0x37},
	{0x8D,0x00},{0x8E,0xF0},{0x8F,0x81},{0x90,0x06},{0x91,0x06},{0x92,0x1E},{0x93,0x0D},{0x94,0x0A},
	{0x95,0x0A},{0x96,0x0C},{0x97,0x05},{0x98,0x0A},{0x99,0x41},{0x9A,0x14},{0x9B,0x0A},{0x9C,0x3F},
	{0x9D,0x33},{0x9E,0xAE},{0x9F,0xF9},{0xA0,0x48},{0xA1,0x13},{0xA2,0x10},{0xA3,0x08},{0xA4,0x30},
	{0xA5,0x19},{0xA6,0x10},{0xA7,0x08},{0xA8,0x24},{0xA9,0x04},{0xAA,0x1E},{0xAB,0x1E},{0xCC,0x19},
	{0xCD,0x0B},{0xCE,0x13},{0xCF,0x64},{0xD0,0x21},{0xD1,0x0F},{0xD2,0x88},{0xE0,0x01},{0xE1,0x04},
	{0xE2,0x41},{0xE3,0xD6},{0xE4,0x00},{0xE5,0x0C},{0xE6,0x0A},{0xE7,0x00},{0xE8,0x00},{0xE9,0x00},
	{0xEE,0x07},{0xEF,0x01},{0x00,0x1E},{0x01,0x3C},{0x02,0x00},{0x03,0x00},{0x04,0x9A},{0x05,0x00},
	{0x06,0xB0},{0x07,0x04},{0x08,0x0D},{0x09,0x0E},{0x0A,0x9C},{0x0B,0x04},{0x0C,0x05},{0x0D,0x0F},
	{0x0E,0x02},{0x0F,0x12},{0x10,0x02},{0x11,0x02},{0x12,0x00},{0x13,0x01},{0x14,0x05},{0x15,0x07},
	{0x16,0x05},{0x17,0x07},{0x18,0x01},{0x19,0x04},{0x1A,0x05},{0x1B,0x0C},{0x1C,0x2A},{0x1D,0x01},
	{0x1E,0x00},{0x21,0x00},{0x22,0x00},{0x23,0x00},{0x25,0x01},{0x26,0x00},{0x27,0x39},{0x28,0x7F},
	{0x29,0x09},{0x30,0x03},{0x31,0x00},{0x32,0x18},{0x33,0x18},{0x34,0x07},{0x35,0x07},{0x36,0x01},
	{0x37,0xFF},{0x38,0x36},{0x39,0x07},{0x3A,0x00},{0x3E,0xFF},{0x3F,0x00},{0x40,0x77},{0x41,0x40},
	{0x42,0x00},{0x43,0x30},{0x44,0xA0},{0x45,0x5C},{0x46,0x00},{0x47,0x00},{0x48,0x58},{0x4A,0x1E},
	{0x4B,0x1E},{0x4C,0x00},{0x4D,0x00},{0x4E,0xA0},{0x4F,0x80},{0x50,0x00},{0x51,0x00},{0x52,0x00},
	{0x53,0x00},{0x54,0x00},{0x57,0x80},{0x59,0x10},{0x5A,0x08},{0x5B,0x94},{0x5C,0xE8},{0x5D,0x08},
	{0x5E,0x1D},{0x5F,0x99},{0x60,0x45},{0x61,0x40},{0x63,0x2D},{0x64,0x02},{0x65,0x96},{0x66,0x00},
	{0x67,0x97},{0x68,0x01},{0x69,0xCD},{0x6A,0x01},{0x6B,0xB0},{0x6C,0x04},{0x6D,0x2C},{0x6E,0x01},
	{0x6F,0x32},{0x71,0x00},{0x72,0x01},{0x73,0x35},{0x74,0x00},{0x75,0x33},{0x76,0x31},{0x77,0x01},
	{0x7C,0x84},{0x7D,0x03},{0x7E,0x01}

};

//proximity register set
unsigned char prox_register_array[][2] = {
//	{0xEF,0x00},{0x41,0x00},{0x42,0x02},{0x48,0x20},{0x49,0x00},{0x51,0x13},{0x83,0x00},{0x9F,0xF8},
//	{0xEF,0x01},{0x01,0x1E},{0x02,0x00},{0x03,0x00},{0x04,0x32},{0x41,0x50},{0x43,0x34},{0x65,0xCE},
//	{0x66,0x0B},{0x67,0xCE},{0x68,0x0B},{0x69,0xE9},{0x6A,0x05},{0x6B,0x50},{0x6C,0xC3},{0x6D,0x50},
//	{0x6E,0xC3},{0x74,0x05},
	{0xEF,0x00},{0x41,0x00},{0x42,0x02},{0x48,0x20},{0x49,0x00},{0x51,0x13},{0x83,0x00},{0x9F,0xF8},
	{0x69,0x2D},{0x6A,0x1E},{0xEF,0x01},{0x01,0x1E},{0x02,0x00},{0x03,0x00},{0x04,0x32},{0x41,0x50},
	{0x43,0x34},{0x65,0xCE},{0x66,0x0B},{0x67,0xCE},{0x68,0x0B},{0x69,0xE9},{0x6A,0x05},{0x6B,0x50},
	{0x6C,0xC3},{0x6D,0x50},{0x6E,0xC3},{0x74,0x05},
};

static int pac7620_register_debug(void);
static int pac7620_register_mode(mode_e mode);
static int pac7620_change_state(state_e state);

